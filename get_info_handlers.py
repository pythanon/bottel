from loader import bot
from telebot.types import Message, CallbackQuery
from states.user_states import UserStates
from utils.get_cities import get_city_dict
from keyboards.inline import city_suggestions, need_photo
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from datetime import date, timedelta, datetime
from utils.params_message import search_params_output
from utils.output_hotels import output_hotels_info
from loguru import logger
from copy import deepcopy


@bot.message_handler(state=UserStates.cities_dict)
@logger.catch
def get_city(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    1. –°–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ "get_city_dict".
    2. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å "city_dict" –≤ "data",
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, 'üîé –ò—â—É –≥–æ—Ä–æ–¥...')

    if not message.text.isdigit():
        city_dict = get_city_dict(message=message)
        if city_dict:
            with bot.retrieve_data(chat_id, chat_id) as data:
                data['cities_dict'] = city_dict
            kb = city_suggestions.make_cities_kb(city_dict)
            bot.delete_message(chat_id=chat_id, message_id=message.message_id)
            bot.send_message(chat_id, '‚¨á –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏:', reply_markup=kb)
        else:
            bot.send_message(chat_id, '‚ùï –ù–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑.')
    else:
        bot.send_message(chat_id, '‚ùï –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—É–∫–≤—ã.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_city-'))
@logger.catch
def city_clarification(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    1. –ü–µ—Ä–µ–¥–∞–µ—Ç –∏–º—è –∏ id –≥–æ—Ä–æ–¥–∞ –≤ "data".
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

    :param call: –æ—Ç–∫–ª–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    chat_id = call.message.chat.id
    city_id = call.data.replace('choose_city-', '')

    with bot.retrieve_data(chat_id, chat_id) as data:
        data['city_name'] = data.get('cities_dict').get(city_id)
        data['city_id'] = city_id

    bot.edit_message_text(text=f'‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {data.get("city_name")}',
                          chat_id=chat_id,
                          message_id=call.message.message_id)

    calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
    bot.send_message(chat_id=chat_id,
                     text=f"‚û° –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
@logger.catch
def get_dates(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    1. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –≤—ã—Å–µ–ª–µ–Ω–∏—è –≤ "data".
    2. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø–∏—Å–µ–π 'check_in' –∏ 'check_out' –≤ "data",
    –≤—ã–≤–æ–¥–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–µ–ª–µ–π.
    :param call: –æ—Ç–∫–ª–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id

    with bot.retrieve_data(chat_id, chat_id) as data:
        if not data.get('check_in'):
            min_date = date.today()
        else:
            min_date = data.get('check_in') + timedelta(1)

        result, key, step = DetailedTelegramCalendar(min_date=min_date,
                                                     locale='ru').process(call.data)

        if not result and key:
            if LSTEP[step] == 'year':
                cur_step = '–≥–æ–¥'
            elif LSTEP[step] == 'month':
                cur_step = '–º–µ—Å—è—Ü'
            else:
                cur_step = '–¥–µ–Ω—å'
            bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏ {cur_step}",
                                  chat_id=chat_id,
                                  message_id=message_id,
                                  reply_markup=key)
        elif result:
            if not data.get('check_in'):
                data['check_in'] = result
                calendar, step = DetailedTelegramCalendar(min_date=result + timedelta(2)).build()
                bot.edit_message_text(text=f"‚¨Ö –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:",
                                      chat_id=chat_id,
                                      message_id=message_id,
                                      reply_markup=calendar)
            else:
                data['check_out'] = result
                bot.edit_message_text(text=f'‚û° –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {data.get("check_in")}\n'
                                           f'‚¨Ö –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data.get("check_out")}',
                                      chat_id=chat_id,
                                      message_id=message_id)

                check_in_date = datetime.strptime(str(data.get('check_in')), "%Y-%m-%d")
                check_out_date = datetime.strptime(str(data.get('check_out')), "%Y-%m-%d")
                days_amount = str(check_out_date - check_in_date).split()
                data['days_amount'] = int(days_amount[0])

                kb = need_photo.make_yes_or_no_kb()
                bot.send_message(chat_id=user_id,
                                 text='üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?',
                                 reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data.startswith('need_photo-'))
@logger.catch
def photo_choice(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ –≤—ã–≤–æ–¥—É —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–µ–ª–µ–π.
    1. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –≤—ã—Å–µ–ª–µ–Ω–∏—è –≤ "data".
    2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - "–¥–∞", –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç True –≤ data['need_photo'] –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ.
    3. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - "–Ω–µ—Ç", –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç False –≤ data['need_photo'] –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.

    :param call: –æ—Ç–∫–ª–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id

    choice = call.data.replace('need_photo-', '')
    with bot.retrieve_data(chat_id, chat_id) as data:
        if choice == 'YES':
            data['need_photo'] = True
            bot.set_state(user_id=user_id,
                          state=UserStates.photo_amount,
                          chat_id=chat_id)
            bot.edit_message_text(text='üñº –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è? (–º–∞–∫—Å–∏–º—É–º 10)',
                                  chat_id=chat_id,
                                  message_id=message_id)
        else:
            data['need_photo'] = False
            bot.set_state(user_id=user_id,
                          state=UserStates.hotels_amount,
                          chat_id=chat_id)
            bot.edit_message_text(text='‚úÖ –§–æ—Ç–æ –Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è.',
                                  chat_id=chat_id,
                                  message_id=message_id)
            bot.send_message(chat_id=chat_id, text='üè® –°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–º–∞–∫—Å–∏–º—É–º 10).')


@bot.message_handler(state=UserStates.photo_amount)
@logger.catch
def get_photo_amount(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–µ–ª–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –º–∞–∫—Å–∏–º—É–º—É.
    2. –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º.
    """
    user_num = message.text
    chat_id = message.chat.id
    message_id = message.message_id

    if user_num.isdigit() and 1 <= int(user_num) <= 10:
        with bot.retrieve_data(chat_id, chat_id) as data:
            data['photo_amount'] = user_num
            bot.delete_message(chat_id=chat_id, message_id=message_id)
            bot.send_message(chat_id=chat_id,
                             text=f'‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–µ–ª—å: {user_num} —à—Ç.')
            bot.set_state(user_id=message.from_user.id,
                          state=UserStates.hotels_amount,
                          chat_id=chat_id)
            bot.send_message(chat_id=chat_id,
                             text='üè® –°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–º–∞–∫—Å–∏–º—É–º 10).')
    else:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
        bot.send_message(chat_id=chat_id, text='‚ùï –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.')


@bot.message_handler(state=UserStates.hotels_amount)
@logger.catch
def get_hotels_amount(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –º–∞–∫—Å–∏–º—É–º—É.
    2. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - "lowprice" –∏–ª–∏ "highprice",
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é "output_hotels_info"
    3. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - "bestdeal", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è –∑–∞ –Ω–æ—á—å.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º.
    """
    user_num = message.text
    chat_id = message.chat.id
    message_id = message.message_id

    if user_num.isdigit() and 1 <= int(user_num) <= 10:
        with bot.retrieve_data(chat_id, chat_id) as data:
            data['hotels_amount'] = user_num
            data_dict = deepcopy(data)

        bot.delete_message(chat_id=chat_id, message_id=message_id)
        bot.send_message(chat_id=chat_id,
                         text=f'‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–µ–ª–µ–π: {data.get("hotels_amount")} —à—Ç.')

        if data_dict.get('command') in ('lowprice', 'highprice'):
            params_text = search_params_output(data=data_dict)
            bot.send_message(chat_id=chat_id,
                             text=params_text)
            output_hotels_info(data=data_dict, message=message)

        else:
            bot.set_state(user_id=message.from_user.id,
                          state=UserStates.price_range,
                          chat_id=chat_id)
            bot.send_message(chat_id=chat_id, text='üíµ‚¨áÔ∏è –í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $.')

    else:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
        bot.send_message(chat_id=chat_id, text='‚ùï –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.')


@bot.message_handler(state=UserStates.price_range)
@logger.catch
def get_price_range(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ "data" –æ —Ü–µ–Ω–∞—Ö,
    –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π).
    2. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º.
    """
    user_price = message.text
    chat_id = message.chat.id
    message_id = message.message_id

    if user_price.isdigit() and int(user_price) >= 0:
        with bot.retrieve_data(chat_id, chat_id) as data:
            if not data.get('min_price'):
                data['min_price'] = user_price
                bot.delete_message(chat_id=chat_id, message_id=message_id)
                bot.send_message(chat_id=chat_id,
                                 text=f'‚úÖ –¶–µ–Ω–∞ –æ—Ç: {user_price}$.')
                bot.send_message(chat_id=chat_id, text='üíµ‚¨ÜÔ∏è –í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å $.')
            else:
                if int(user_price) > int(data.get('min_price')):
                    data['max_price'] = user_price
                    bot.delete_message(chat_id=chat_id, message_id=message_id)
                    bot.send_message(chat_id=chat_id,
                                     text=f'‚úÖ –¶–µ–Ω–∞ –¥–æ: {user_price}$.')
                    bot.set_state(user_id=message.from_user.id,
                                  state=UserStates.distance,
                                  chat_id=chat_id)
                    bot.send_message(chat_id=chat_id, text='üìç –í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º).')
                else:
                    bot.delete_message(chat_id=chat_id, message_id=message_id)
                    bot.send_message(chat_id=chat_id,
                                     text=f'‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {data.get("min_price")}.')
    else:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
        bot.send_message(chat_id=chat_id, text='‚ùï –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')


@bot.message_handler(state=UserStates.distance)
@logger.catch
def get_distance(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–µ –±–æ–ª—å—à–µ –Ω—É–ª—è.
    2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data['distance'].
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é "output_hotels_info".

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º.
    """
    user_distance = message.text
    chat_id = message.chat.id
    message_id = message.message_id

    if user_distance.isdigit() and int(user_distance) > 0:
        with bot.retrieve_data(chat_id, chat_id) as data:
            data['distance'] = user_distance
            data_dict = deepcopy(data)

        bot.delete_message(chat_id=chat_id,
                           message_id=message_id)
        bot.send_message(chat_id=chat_id,
                         text=f'‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {user_distance} –∫–º.')

        params_text = search_params_output(data=data_dict)
        bot.send_message(chat_id=chat_id,
                         text=params_text)
        output_hotels_info(data=data_dict, message=message)

    else:
        bot.delete_message(chat_id=chat_id,
                           message_id=message_id)
        bot.send_message(chat_id=chat_id,
                         text='‚ùï –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è.')
